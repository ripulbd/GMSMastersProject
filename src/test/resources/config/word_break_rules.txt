# $Id: word_break_rules.txt,v 1.1 2008/06/11 17:24:51 spal Exp $
# $Source: /export/cvsrepository/dev/people/spal/jrocker/src/main/resources/word_break_rules.txt,v $
# Copy of default Word break rules augmented with custom rules
# See: http://unicode.org/reports/tr29
# For a description of the variables involved.
# The initial file was generated by instantiating an RBBI.wordInstance
# and then RBBI.toString() to dump out the ruleset, then modified to suit
# the application.

# Character Class Definitions
$VoiceMarks = [\uff9e\uff9f];
$Format = [\p{Word_Break = Format}];
$Katakana = [\p{Word_Break = Katakana}-$VoiceMarks];
$ALetter = [\p{Word_Break = ALetter}];
$MidLetter = [\p{Word_Break = MidLetter}];
$MidNum = [\p{Word_Break = MidNum}];
$Numeric = [\p{Word_Break = Numeric}];
$ExtendNumLet = [\p{Word_Break = ExtendNumLet}];
$CR = \u000d;
$LF = \u000a;
$Extend = [\p{Grapheme_Cluster_Break = Extend}$VoiceMarks];
# Dictionary character set, for triggering language based break engines.
# Currently limited to LineBreak=Complex_Content. Note that this set only
# works in Unicode 5.0 or later as the definition of Complex_Content was
# corrected to include characters requiring dictionary break.
$dictionary = [:LineBreak = Complex_Context:];
$Control = [\p{Grapheme_Cluster_Break = Control}];
$ALetterPlus = [$ALetter [$dictionary-$Extend-$Control]];

# Rules 4 - Ignore Format and Extend characters except when they appear
# at the beginning of a region of text.
$KatakanaEx = $Katakana ($Extend | $Format)*;
$ALetterEx = $ALetterPlus ($Extend | $Format)*;
$MidLetterEx = $MidLetter ($Extend | $Format)*;
$MidNumEx = $MidNum ($Extend |  $Format)*;
# Custom : Modified to add an optional trailing % sign
$NumericEx = $Numeric ($Extend |  $Format)*(\%)*;
$ExtendNumLetEx = $ExtendNumLet ($Extend |  $Format)*;

$Hiragana = [:Hiragana:];
$Ideographic = [:IDEOGRAPHIC:];
$HiraganaEx = $Hiragana ($Extend |  $Format)*;
$IdeographicEx = $Ideographic  ($Extend |  $Format)*;
# ============= Custom Rules ================
# Abbreviation: Uppercase alpha chars separated by period and optionally followed by a period 
$Abbreviation = [A-Z](\.[A-Z0-9])+(\.)*;
# Hyphenated Word : sequence of letter or digit, (punctuated by [/+&_-], with following letter or digit sequence)+
$HyphenatedWord = [A-Za-z0-9]+([\-\+\&_][A-Za-z0-9]+)+;
# Email address: sequence of letters, digits and punctuation followed by @ and followed by another sequence
$EmailAddress = [A-Za-z0-9_\-\.]+\@[A-Za-z][A-Za-z0-9_]+\.[a-z]+;
# Internet Addresses: http://www.foo.com(/bar)
$InternetAddress = [a-z]+\:\/\/[a-z0-9]+(\.[a-z0-9]+)+(\/[a-z0-9][a-z0-9\.]+);
# XML markup: A run begins with < and ends with the first matching >
$XmlMarkup = \<[^\>]+\>; 
# Emoticon: A run that starts with :;B8{[ and contains only one or more of the following -=/{})(
$Emoticon = [B8\:\;\{\[][-=\/\{\}\)\(]+; 
# Internet IP Address - a block of 4 numbers of max 3 numbers each separated by period
$InternetIpAddress = [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+;
# Internet Site Address - such as www.ibm.com
$InternetSiteAddress = [a-z][a-z0-9]*(\.[a-z0-9])+;

!!chain;

!!forward;
# Rule 3 - Don't break within CRLF
$CR $LF  ($Extend | $Format)*;
# Rule 4 - Ignore Format and Extend chars, except when they appear at
# the beginning of a region of text
.? ($Extend |  $Format)+;
$NumericEx {100};
$ALetterEx {200};
$KatakanaEx {300};
$HiraganaEx {300};
$IdeographicEx {400};
# Rule 5 - Don't break between most letters
$ALetterEx $ALetterEx {200};
# Rule 6,7 - Don't break letters across certain punctuation
$ALetterEx $MidLetterEx $ALetterEx {200};
$NumericEx $MidNumEx $NumericEx {100};
# Rule 8,9,10 - Don't break within sequence of digits, or digits adjacent
# to letters.
$NumericEx $NumericEx {100};
$ALetterEx $Format* $NumericEx {200};
$NumericEx $ALetterEx {200};
# Rule 11,12 - Don't break within sequences, such as 3.2 or 3,456.78
$NumericEx $MidNumEx $NumericEx {100};
# Rule 13 - Don't break between Katakana
$KatakanaEx $KatakanaEx {300};
# Rule 13a,b - Don't break from extenders
$ALetterEx $ExtendNumLetEx {200};
$NumericEx $ExtendNumLetEx {100};
$KatakanaEx $ExtendNumLetEx {300};
$ExtendNumLetEx $ExtendNumLetEx{200};
$ExtendNumLetEx $ALetterEx  {200};
$ExtendNumLetEx $NumericEx  {100};
$ExtendNumLetEx $KatakanaEx {300};
# =========== Custom Forwards ====================
$Abbreviation {500};
$HyphenatedWord {501};
$EmailAddress {502};
$InternetAddress {503};
$XmlMarkup {504};
$Emoticon {505};
$InternetIpAddress {506};
$InternetSiteAddress {507};

!!reverse;
$BackALetterEx = ($Format | $Extend)* $ALetterPlus;
$BackNumericEx = ($Format | $Extend)* $Numeric;
$BackMidNumEx = ($Format | $Extend)* $MidNum;
$BackMidLetterEx = ($Format | $Extend)* $MidLetter;
$BackKatakanaEx = ($Format | $Extend)* $Katakana;
$BackExtendNumLetEx= ($Format | $Extend)* $ExtendNumLet;
# Rule 3
($Format | $Extend)* $LF $CR;
# Rule 4
($Format | $Extend)*  .?;
# Rule 5
$BackALetterEx $BackALetterEx;
# Rule 6 and 7
$BackALetterEx $BackMidLetterEx $BackALetterEx;
# Rule 8
$BackNumericEx $BackNumericEx;
# Rule 9
$BackNumericEx $BackALetterEx;
# Rule 10
$BackALetterEx $BackNumericEx;
# Rule 11 and 12
$BackNumericEx $BackMidNumEx $BackNumericEx;
# Rule 13
$BackKatakanaEx $BackKatakanaEx;
# Rule 13a, 13b
($BackALetterEx | $BackNumericEx | $BackKatakanaEx | $BackExtendNumLetEx) $BackExtendNumLetEx;
$BackExtendNumLetEx ($BackALetterEx | $BackNumericEx | $BackKatakanaEx);

!!safe_reverse;
# Rule 3
($Extend | $Format)+ .?;
# Rule 6
$MidLetter $BackALetterEx;
# Rule 11
$MidNum $BackNumericEx;
# for dictionary based break
$dictionary $dictionary;

!!safe_forward;
# Rule 4
($Extend | $Format)+ .?;
# Rule 6
$MidLetterEx $ALetterEx;
# Rule 11
$MidNumEx $NumericEx;
# for dictionary based break
$dictionary $dictionary;
